/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../gql/context"
import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "DRAFT" | "PAID" | "PENDING"
  Status: "DRAFT" | "PAID" | "PENDING"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Address: { // root type
    city: string; // String!
    country: string; // String!
    postCode: string; // String!
    street: string; // String!
  }
  Invoice: { // root type
    clientAddress: NexusGenRootTypes['Address']; // Address!
    clientEmail: string; // String!
    clientName: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    items: NexusGenRootTypes['InvoiceItem'][]; // [InvoiceItem!]!
    paymentDue: NexusGenScalars['DateTime']; // DateTime!
    paymentTerms: number; // Int!
    senderAddress: NexusGenRootTypes['Address']; // Address!
    status: NexusGenEnums['Status']; // Status!
    tag: string; // String!
    total: number; // Float!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  InvoiceItem: { // root type
    name: string; // String!
    price: number; // Float!
    quantity: number; // Int!
    total: number; // Float!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    imageUrl: string; // String!
    lastName: string; // String!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Address: { // field return type
    city: string; // String!
    country: string; // String!
    postCode: string; // String!
    street: string; // String!
  }
  Invoice: { // field return type
    clientAddress: NexusGenRootTypes['Address']; // Address!
    clientEmail: string; // String!
    clientName: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    items: NexusGenRootTypes['InvoiceItem'][]; // [InvoiceItem!]!
    paymentDue: NexusGenScalars['DateTime']; // DateTime!
    paymentTerms: number; // Int!
    senderAddress: NexusGenRootTypes['Address']; // Address!
    status: NexusGenEnums['Status']; // Status!
    tag: string; // String!
    total: number; // Float!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  InvoiceItem: { // field return type
    name: string; // String!
    price: number; // Float!
    quantity: number; // Int!
    total: number; // Float!
  }
  Mutation: { // field return type
    createInvoice: NexusGenRootTypes['Invoice'] | null; // Invoice
    createInvoiceItem: NexusGenRootTypes['InvoiceItem'] | null; // InvoiceItem
    deleteInvoice: NexusGenRootTypes['Invoice'] | null; // Invoice
    deleteInvoiceItem: NexusGenRootTypes['InvoiceItem'] | null; // InvoiceItem
    updateInvoice: NexusGenRootTypes['Invoice'] | null; // Invoice
  }
  Query: { // field return type
    invoice: NexusGenRootTypes['Invoice'] | null; // Invoice
    invoices: NexusGenRootTypes['Invoice'][] | null; // [Invoice!]
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    imageUrl: string; // String!
    lastName: string; // String!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Address: { // field return type name
    city: 'String'
    country: 'String'
    postCode: 'String'
    street: 'String'
  }
  Invoice: { // field return type name
    clientAddress: 'Address'
    clientEmail: 'String'
    clientName: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'ID'
    items: 'InvoiceItem'
    paymentDue: 'DateTime'
    paymentTerms: 'Int'
    senderAddress: 'Address'
    status: 'Status'
    tag: 'String'
    total: 'Float'
    updatedAt: 'DateTime'
  }
  InvoiceItem: { // field return type name
    name: 'String'
    price: 'Float'
    quantity: 'Int'
    total: 'Float'
  }
  Mutation: { // field return type name
    createInvoice: 'Invoice'
    createInvoiceItem: 'InvoiceItem'
    deleteInvoice: 'Invoice'
    deleteInvoiceItem: 'InvoiceItem'
    updateInvoice: 'Invoice'
  }
  Query: { // field return type name
    invoice: 'Invoice'
    invoices: 'Invoice'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    firstName: 'String'
    id: 'ID'
    imageUrl: 'String'
    lastName: 'String'
    role: 'Role'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}